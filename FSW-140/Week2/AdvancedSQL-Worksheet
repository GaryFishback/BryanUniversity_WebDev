For this assignment, write queries using SQL to acquire data about customers, vendors, products, and employees in a fictitious sales database. These queries will cover many of the core aspects of writing SQL to produce data for reporting and analyzing information. There may be multiple ways to produce the same results, but ensure you are returning the requested fields.

Using the Sales Orders database, complete the queries below. 

1. Display customers who have no sales rep (employees) in the same state.
a. Query: SELECT CustomerID FROM customers WHERE CustState NOT IN (SELECT EmpState FROM employees);
b. Columns: 1

c. Expected Rowcount:11

2. Display all orders associated with the customers from problem one and put them into a new table named no sales rep.
a. Query:  create table nosalesrep;
 ALTER TABLE nosalesrep ADD orders VARCHAR(500);
INSERT INTO nosalesrep (orders) SELECT OrderNumber FROM orders WHERE CustomerID = ANY (SELECT DISTINCT CustomerID FROM customers WHERE CustState NOT IN (SELECT EmpState FROM employees));
b. Columns: 1

c. Expected Rowcount: 357

3. Assign a sales rep (employee) to each customer that does not have one in the newly created table from problem three.
a. Query: 
SELECT * FROM nosalesrep;
UPDATE nosalesrep 
SET nosalesrep.customers =  (  SELECT  (SELECT DISTINCT CustomerID FROM orders WHERE orders.OrderNumber = nosalesrep.orders)  FROM orders
     WHERE nosalesrep.orders = orders.OrderNumber ) SELECT * FROM nosalesrep;
SET nosalesrep.employee =   ( SELECT  (SELECT DISTINCT EmployeeID FROM orders WHERE orders.OrderNumber = nosalesrep.orders) FROM orders
    WHERE nosalesrep.orders = orders.OrderNumber  );
SELECT * FROM nosalesrep;

b. Columns: 3

c. Expected Rowcount: 358

4. What is the average quoted price of a helmet?
a. Query: SELECT AVG(RetailPrice) FROM products//
    WHERE ProductName LIKE '%helmet%'

b. Columns: 1

c. Expected Rowcount:1

5. What was the date of the earliest ship date?
a. Query:   SELECT * FROM orders ORDER BY ShipDate LIMIT 1

b. Columns: 5

c. Expected Rowcount:1

6. What is the total amount (in dollars) of orders from the state of Oregon?
a. Query: SELECT SUM(QuotedPrice) FROM order_details WHERE OrderNumber = ANY ( SELECT OrderNumber FROM orders WHERE CustomerID = ANY (SELECT CustomerID FROM customers WHERE CustState = "OR"));

b. Columns: 1

c. Expected Rowcount:1

7. Show each employee, the employee’s total sales (in dollars), the employee’s total sales item quantity, and the average item 
a. Query: -- CREATE TABLE employeeStats (employeeID INT,employeeName VARCHAR(500), orderNum INT, totalsales INT, averageItem VARCHAR(500)); 
 DELETE FROM employeestats;
INSERT INTO employeeStats (orderNum, totalsales, averageItem, orderQuatity) SELECT DISTINCT orderNumber, sales, average, summedQuantity  FROM (SELECT SUM(QuantityOrdered) AS summedQuantity,SUM(QuotedPrice) AS sales, ROUND(AVG(ProductNumber)) as average , orderNumber FROM order_details GROUP BY OrderNumber) t ;

-- ALTER TABLE employeeStats
-- ADD orderQuatity INT;
SELECT * FROM employeestats;
--     
    UPDATE employeeStats
SET employeeStats.employeeID = 
    (
SELECT 
 ( SELECT DISTINCT employeeID FROM orders WHERE orders.OrderNumber = employeestats.orderNum )
FROM orders
    WHERE
     orders.OrderNumber = employeeStats.orderNum
    );

UPDATE employeeStats
SET employeeStats.employeeName = 
    (
SELECT 
 (SELECT concat(EmpFirstName, EmpLastName) AS FullName FROM employees WHERE employees.EmployeeID = employeeStats.employeeID )
FROM employees
    WHERE
     employees.EmployeeID = employeeStats.employeeID
    );
    
SELECT * FROM employeeStats;

b. Columns: 6

c. Expected Rowcount: 933

8. Create a new table with the following: vendor id, vendor phone number, daysToDeliver, product number, and product name.
a. Query:  -- -- -- Create a new table with the following: vendor id, vendor phone number, daysToDeliver, product number, and product name.
CREATE TABLE vendorsvsproducts (vendorID INT,vendorName VARCHAR(500), vendorPhone INT, productNum INT, productName VARCHAR(500), daysTdeliver INT);
INSERT INTO vendorsvsproducts (daysTdeliver, productNum, vendorID) SELECT DISTINCT DaysToDeliver, ProductNumber, VendorID FROM product_vendors;

UPDATE vendorsvsproducts
SET vendorsvsproducts.vendorName = 
    (
SELECT 
 (SELECT DISTINCT VendName FROM vendors WHERE vendors.VendorID = vendorsvsproducts.vendorID)
FROM vendors
    WHERE
     vendorsvsproducts.vendorID = vendors.VendorID
    );
    
SELECT * FROM vendorsvsproducts;

UPDATE vendorsvsproducts
SET vendorsvsproducts.productName = 
    (
SELECT 
 (SELECT DISTINCT ProductName FROM products WHERE products.ProductNumber = vendorsvsproducts.productNum)
FROM products
    WHERE
     vendorsvsproducts.ProductNum=products.ProductNumber
    );
    
SELECT * FROM vendorsvsproducts;

UPDATE vendorsvsproducts
SET vendorsvsproducts.vendorPhone = 
    (
SELECT 
 (SELECT DISTINCT VendPhoneNumber FROM vendors WHERE vendors.VendorID = vendorsvsproducts.vendorID )
FROM vendors
    WHERE
     vendorsvsproducts.vendorID = vendors.VendorID
    );
    
SELECT * FROM vendorsvsproducts;


b. Columns: 6

c. Expected Rowcount: 90

9. Show all current orders whos order total is more than the average order total for all orders.
a. Query: SELECT DISTINCT orderNumber, sales FROM (SELECT SUM(QuotedPrice) AS sales, orderNumber FROM order_details GROUP BY OrderNumber) t WHERE sales > (SELECT AVG(QuotedPrice) FROM order_details);

b. Columns: 2

c. Expected Rowcount: 680